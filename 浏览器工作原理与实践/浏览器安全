# 浏览器安全



浏览器安全：

- Web 页面安全
- 浏览器网络安全
- 浏览器系统安全



## Web 页面安全

### 同源政策

两个 URL 的协议、域名和端口相同

1. DOM 层面：限制不同源的 JS 脚本对当前 DOM 对象读写操作
2. 数据层面：限制不同源的站点读取当前站点的数据，如：Cookie、IndexDB等
3. 网络层面：限制 XMLHttpRequest 等方式将站点数据发送给不同源站点

安全和便利性权衡：

1. 页面引用第三方资源：CSP限制
2. 跨域请求：CORS
3. DOM 操纵：跨文档信息机制



### xss

跨站脚本攻击

常见方式：

- 存储型 XSS 攻击
- 反射性 XSS 攻击
- 基于 DOM 的 XSS 攻击

如何阻止：

- 服务器对输入脚本进行过滤或转码
- 充分利用 CSP
- 使用 HttpOnly 属性



### CSRF

跨站请求伪造

与 XSS 不同，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅利用服务器的漏洞和用户的登录状态实施攻击

常见方式：

- 自动发起 Get 请求
- 自动发起 Post 请求
- 引诱用户点击链接

如何阻止：

- 利用 Cookie 的 SameSite 属性
- 验证请求的来源站点：Origin、Referer
- SCRF Token



##  浏览器系统安全

安全沙箱：页面和系统间的隔离墙

将渲染进程和操作系统隔离，让渲染进程在执行过程无法访问或修改操作系统中的数据；通过浏览器内核将结果通过 IPC 发送给渲染进程

<img src=".\images\浏览器内核和渲染进程.webp" style="zoom:50%;" />



## 浏览器网络安全

HTTPS：让数据传输更安全

<img src="E:\personalData\知识总结\浏览器工作原理与实践\images\HTTP VS HTTPS.webp" style="zoom:50%;" />

安全层：对发起 HTTP 请求的数据进行加密、对接受到 HTTP 的数据内容进行解密

